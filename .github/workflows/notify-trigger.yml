name: notify-trigger

on:
  schedule:
    - cron:  '00 11 * * *'

  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check for 'tock-tbf' updates
        run: |
          TARGET_FILE="tock-tbf/src"
          
          RESPONSE=$(curl -s "https://api.github.com/repos/ioqnq/KevinCookieCompany.com/commits?path=$TARGET_FILE&sha=main")

          # Find sha of last commit
          COMMIT_SHA=$(echo "$RESPONSE" | jq -r ".[0].sha")
          echo "Commit sha: $COMMIT_SHA"

          # Find sha stored in file
          SHA_RESPONSE=$(curl -s -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/ioqnq/KevinCookiedownstream/contents/.lastcommsha)

          STORED_SHA=$(echo "$SHA_RESPONSE" | jq -r '.content' | base64 -d | tr -d '\n')
          echo "Last stored SHA: $STORED_SHA"

          # Check if the two match to check if we're up to date
          if [ "$COMMIT_SHA" == "$STORED_SHA" ]; then
            echo "Up to date."
            exit 0
          else
            echo "Different - must update"
            
            i=0
            COMM_SHAS=()

            # Build array of shas that need to be listed in the issue
            while [ "$CURR_COMM_SHA" != "$STORED_SHA" ]
            do
              CURR_COMM_SHA=$(echo "$RESPONSE" | jq -r ".[$i].sha")
              if [ "$CURR_COMM_SHA" == "$STORED_SHA" ]; then
                  break
              fi
              COMM_SHAS+=("$CURR_COMM_SHA")
              i=$(expr $i + 1)
            done

            # Debug echo for array
            for idx in "${!COMM_SHAS[@]}"; do
              echo "sha $idx is ${COMM_SHAS[$idx]}"
            done

            # Issue creation
            mapfile -t matching_issues < <(gh issue list \
            --label "$LABELS" \
            --state open \
            --json number,title \
            --jq ".[] | select(.title == \"$TITLE\") | .number")
          
            for issue_number in "${matching_issues[@]}"; do
              echo "Closing and unpinning issue #$issue_number with matching title"
              gh issue close "$issue_number"
              gh issue unpin "$issue_number" || echo "(Not pinned)"
            done
            new_issue_url=$(gh issue create \
              --title "$TITLE" \
              --assignee "$ASSIGNEES" \
              --label "$LABELS" \
              --body "$BODY")
            if [[ $PINNED == true ]]; then
              gh issue pin "$new_issue_url"
            fi
            exit 0
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          TITLE: Bring updates from 'tock-tbf' to 'tbf-parser'
          ASSIGNEES: unassigned
          LABELS: D3-TBF PARSER,P1-CRITICAL
          BODY: |
            After finishing #41 , use the resulting information to update out library to be up-to-date w/r/t to features with upstream crate. Note that it is still necessary that we do not use static lifetimes.
          PINNED: false
          CLOSE_PREVIOUS: true

          

